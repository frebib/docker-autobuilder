#!/usr/bin/env bash
[ -n "$DEBUG" ] && set -ax
set -e

join() { local d=$1; shift; echo -n "$1"; shift; printf "%s" "${@/#/$d}"; }
print_msg() { >&2 echo -e "\e[1m${1}\e[0m"; }
looperr() { print_msg "=> Error updating '$1', line $2, exit-code $3"; }
conterr() { print_msg "   Error: $1: $2"; }
arerror() { print_msg "=> Error: $(basename $0): $*"; }
error()   { print_msg "=> Error: $(basename $0): $*"; }
indent()  { sed -e 's|^|   |g'; }

print_msg "=> Performing update check at $(date +"%a %d %b %Y, %H:%M")"

CONFIG_DIR=$(realpath ${1:-${CONFIG_DIR:-/config}})
RELEASE_DIR=$(realpath ${RELEASE_DIR:-/release})

if ! [ -d "$CONFIG_DIR" ]; then
    error "Configuration directory '$CONFIG_DIR' doesn't exist"
    exit 5
fi
if ! [ -d "$RELEASE_DIR" ]; then
    print_msg "=> Warning: Release directory '$RELEASE_DIR' doesn't exist"
    mkdir -p "$RELEASE_DIR" || {
        arerror "Failed to create release directory '$RELEASE_DIR'"
        exit 6
    }
fi

cd "$CONFIG_DIR"

run_autohook() {
    local HOOKS_DIR="$CONFIG_DIR/hooks"
    local HOOK_EXE="$HOOKS_DIR/$1"
    if [ -d "$HOOKS_DIR" -a -f "$HOOK_EXE" ]; then
        if [ -x "$HOOK_EXE" ]; then
            "$(readlink -f "$HOOK_EXE")" 2>&1 | indent
        else
            arerror "Hook $HOOK_EXE is not executable!"
        fi
    fi
}

# Run pre-check hook
run_autohook pre_update

containers=($(find . -maxdepth 1 -type d -not -name '.*' -not -name 'hooks' | sed 's|^\./||g' | tac | xargs))

# Count the containers
COUNT=${#containers[@]}
i=0

if [ $COUNT -gt 0 ]; then
    print_msg "   Found container configs: $(join ', ' ${containers[@]})"
else
    print_msg "   No container configs found"
    exit 0
fi

trap 'looperr "$CONT" "$LINENO" "$?"; continue' ERR
set +e # Errors now handled by the trap
for CONT in ${containers[@]}; do
    ((i+=1))
    print_msg "\n=> Checking for updates to $CONT ($i/$COUNT)"

    CONT_DIR="$CONFIG_DIR/$CONT"
    cd "$CONT_DIR"

    BUILDS=( 'default' )
    if [ -d build ]; then
        BUILDS=($(cd build; find * -maxdepth 0 -type d | xargs))
    fi

    for script in get-release compare-version; do
        if ! [ -e "$CONT_DIR/$script" ]; then
            conterr "$CONT" "script '$script' not found"
            continue 2
        elif ! [ -x "$CONT_DIR/$script" ]; then
            conterr "$CONT" "file '$script' is not set executable"
            continue 2
        fi
    done

    j=0
    for BUILD in ${BUILDS[@]}; do
        if [ "$BUILD" = "default" ]; then
            unset BUILD
        else
            ((j+=1))
            print_msg "\n=> Checking build $BUILD ($j/${#BUILDS[@]})"
        fi

        CONT_BUILD=$(join : "$CONT" $BUILD)

        # Magic stdout/stderr to variables http://stackoverflow.com/a/26827443
        #   ret     is $?
        #   version is stdout
        #   release is stderr
        [ -n "$DEBUG" ] && set +ax
        . <({ release=$({ version=$(./get-release "$BUILD"); } 2>&1; ret=$?; { declare -p version; declare -p ret; } >&2); declare -p release; } 2>&1)
        [ -n "$DEBUG" ] && set -ax

        if [ $ret -ne 0 ]; then
            echo "$version" | sed 's|^|   |g' >&2
            conterr "$CONT_BUILD" "get-release returned $ret"
            continue
        fi

        print_msg "   Latest version is  '$version'"

        RELEASE_FILE="$RELEASE_DIR/$CONT/$version"
        LATEST_BUILD_FILE="$(join - '.latest_build' $BUILD)"
        LATEST_BUILD_PATH="$RELEASE_DIR/$CONT/$LATEST_BUILD_FILE"
        # Save release info to file
        mkdir -p "$RELEASE_DIR/$CONT"
        echo "$release" > "$RELEASE_FILE"

        if [ -f "$LATEST_BUILD_PATH" ]; then
            if [ -h "$LATEST_BUILD_PATH" ]; then
                ACTUAL_FILE="$(readlink -f "$LATEST_BUILD_PATH" 2>/dev/null)"
                if ! [ -f "$ACTUAL_FILE" ]; then
                    arerror "Symbolic link $LATEST_BUILD_PATH points to a file that doesn't exist. "
                    DEFAULT_BUILD=true
                else
                    PREV_BUILD_VERSION="$(basename "$ACTUAL_FILE")"
                    print_msg "   Previous build was '$PREV_BUILD_VERSION'"
                fi
            else
                print_msg "   Warning: $LATEST_BUILD_PATH isn't a symbolic link,"
                print_msg "            continuing without previous version argument"
            fi
        else
            print_msg "   Warning: $LATEST_BUILD_PATH doesn't exist"
            DEFAULT_BUILD=true
        fi

        if [ "$DEFAULT_BUILD" = "true" ]; then
            print_msg "   Building image as fallback, some version-comparison details are missing"
            SHOULD_BUILD=true
        else
            ./compare-version "$version" "$RELEASE_FILE" "${PREV_BUILD_VERSION:-}" "$ACTUAL_FILE" "$BUILD" && ret=$? || ret=$?
            case $ret in
                0)   print_msg "   Release version is newer!"; SHUOLD_BUILD=true;;
                255) print_msg "   Already most recent version"; continue;;
                *)   conterr "$CONT_BUILD" "compare-version returned with exit code $ret";;
            esac
        fi

        # To build, or not to build, that is the question
        [ "$SHOULD_BUILD" != "true" ] && continue

        print_msg "=> Building image $CONT_BUILD"

        # Load image environment variables
        ENV_FILES=()
        # Add all present env files
        for file in env build/$BUILD/env; do
            if [ -f "$file" ]; then
                ENV_FILES+=("$file")
            fi
        done
        # Join files into command as to source them when executed
        SOURCE_ENV=$(echo "${ENV_FILES[@]}" | sed -r 's|[^ ]+|. &; |g')
        # TODO: Don't source these files, it's dumb and pointless
        #       They should just be parsed instead
        # Source env files into empty environment, removing defaults & 'export'
        ENV_OPTS=$(env -i sh -c "set -o allexport; $SOURCE_ENV env" \
            | sed -e '/^PWD=/d; /^SHLVL=/d; /^_=/d; s/^export//g' | xargs)

        HOOKS=()
        for dir in build/$BUILD/hooks hooks; do
            if [ -d "$dir" ]; then
                HOOKS+=("$(pwd)/$dir")
            fi
        done
        HOOK_OPTS="$(echo "${HOOKS[@]}" | sed -r 's|[^ ]+|-h & |g')"

        export BUILD \
               RELEASE_FILE \
               RELEASE_VERSION="$version"

        run_autohook pre_build

        # Build image using env
        env $ENV_OPTS build-image $HOOK_OPTS

        run_autohook post_build

        if [ $? -eq 0 ]; then
            print_msg "=> Successfully built $CONT_BUILD"

            print_msg "   Linking latest release as '$LATEST_BUILD_FILE'"
            # ln -r creates a relative symlink, however busybox says no
            (cd "$(dirname "$LATEST_BUILD_PATH")"; ln -sfv "$version" "$LATEST_BUILD_FILE" | indent)

            # Remove all source/build files to make way for next image
            rm -rf /src/{,.}* /app/{,.}* &>/dev/null || true
        fi

    done
done

run_autohook post_update
